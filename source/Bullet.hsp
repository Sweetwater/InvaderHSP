#ifndef ___Bullet___
#define ___Bullet___


#include "./source/Define.hsp"

#module ModBullet mX, mY, mSpeed, mGravity, mAngle, mDirection, mIsActive, mImageID

#include "hspmath.as"

#const maxSpeed   6.0
#const firstSpeed 1.1
#const accel      0.1
#const gravity    0.02

#const xLimitMin 0
#const xLimitMax screenWidth
#const yLimitMin 0
#const yLimitMax screenHeight

#modinit int imageID
	mImageID = imageID
	mMoveX = 0.0
	mMoveY = 0.0
	mSpeed = 0.0
	mAngle = 0.0
	mIsActive = false
	return

#modterm
	return

#modfunc bulletUpdate
	if mIsActive == false : return

	mSpeed += accel
	if mSpeed > maxSpeed : mSpeed = maxSpeed
	mMoveX = cos(mAngle) * mSpeed
	mMoveY = sin(mAngle) * mSpeed + mGravity
	mGravity += gravity

dbgMes ,30,"mSpeed   :" + mSpeed
dbgMes ,44,"mMoveX   :" + mMoveX
dbgMes ,58,"mMoveY   :" + mMoveY
dbgMes ,72,"mGravity :" + mGravity
dbgMes ,86,"accel    :" + accel


	mX += mMoveX
	mY += mMoveY
	mX = limitf(mX, xLimitMin, xLimitMax)
	mY = limitf(mY, yLimitMin, yLimitMax)
	intX = int(mX)
	intY = int(mY)
	if (intX = xLimitMin) | (intX = xLimitMax) : mIsActive = false
	if (intY = yLimitMin) | (intY = yLimitMax) : mIsActive = false
	return

#modfunc bulletDraw
	if mIsActive == false : return
	pos round(mX), round(mY)
	celput mImageID, 0, ,, mAngle
	return



#modcfunc bulletGetX
	return mX

#modcfunc bulletGetY
	return mY

#modcfunc bulletIsActive
	return mIsActive

#modfunc bulletFire int _x, int _y, int _direction
	if mIsActive : return

	mX = _x
	mY = _y
	mMoveX = 0
	if _direction == dirUp : mMoveY = -speed : else : mMoveY = speed
	mIsActive = true
	return

#modfunc bulletFire2 int _x, int _y, double _angle
	if mIsActive : return

	mX = double(_x)
	mY = double(_y)
	mAngle = _angle
	mSpeed = firstSpeed
	mGravity = 0.0
	mIsActive = true
	return

#modfunc bulletDisable
	mIsActive = false
	return

#global


#endif
