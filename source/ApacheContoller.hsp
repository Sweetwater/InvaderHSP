#ifndef ___ApacheController___
#define ___ApacheController___

#include "./source/Define.hsp"
#include "./source/Apache.hsp"


#module ModApacheController	mApache,			\
							mTargetX, mTargetY,	\
							mIsOldPChange,		\
							mIsPChange,			\
							mPattern,			\
							mPatternSub,		\
							mPatternCounter,	\
							mState

#include "./source/ApacheDefine.hsp"

#define ctype toRadian(%1) (double(%1) * M_PI / 180)

#define ctype rnd2(%1, %2)  (rnd(%2-%1) + %1)


#enum patternEntry0 = 0
#enum patternEntry1
#enum patternFlight
#enum patternUp
#enum patternUpCannon
#enum patternDiveUp
#enum patternDiveRocket
#enum patternFastForwardCannon
#enum patternDownRocket
#enum patternLRCannon
#enum patternLRFlight


#modinit var _apache
	mApache = _apache

	if sStaticInit : return
	sStaticInit = true

	dim sLocals0, 16
	dim sLocals1, 16
	dim sLocals2, 16
	dim sLocals3, 16

	return

#modterm
	return

#const upCanonnCount (60)

#modfunc aCtrUpdate

	aCtrController thismod

	mIsPChange = mIsOldPChange
	mIsOldPChange = false

	aX = apacheGetX(mApache)
	aY = apacheGetY(mApache)
	aD = apacheGetDirection(mApache)

	if mPattern == patternEntry0 {
		if aY > mTargetY {
			aCtrChangePattern thismod, patternUpCannon
		}
	}
	else : if mPattern == patternEntry1 {
		if aCtrCheckX(thismod, aX, mTargetX) {
			aCtrChangePattern thismod, patternUpCannon
		}
	}
	else : if mPattern == patternFlight {
		if mIsPChange {
			apacheSetAttack mApache, attackNpne
			apacheSetAction mApache, actionFlight
		}
	}
	else : if mPattern == patternUp {
		if mIsPChange {
			apacheSetAttack mApache, attackNpne
			apacheSetAction mApache, actionUp
			mTargetY = rnd2(40, 60)
		}
		if aY < mTargetY {
			aCtrChangePattern thismod, patternFlight
		}
	}
	else : if mPattern == patternUpCannon {
		if mIsPChange{
			apacheSetAttack mApache, attackCRake
			apacheSetAction mApache, actionUp
			mPatternCounter = upCanonnCount
		}
		mPatternCounter--
		if mPatternCounter == 0 {
			aCtrChangePattern thismod, patternFlight
		}
	}
	else : if mPattern == patternDiveUp {
		if mPatternSub == 0 {
			if mIsPChange {
				apacheSetAttack mApache, attackNone
				apacheSetAction mApache, actionDive
				mTargetY = rnd2(200, 240)
			}
			if aY > mTargetY {
				aCtrChangePattern thismod, patternDiveUp, 1
			}
		}
		else {
			if mIsPChange {
				apacheSetAction mApache, actionUp
				mTargetY = rnd2(40, 60)
			}
			if aY < mTargetY {
				aCtrChangePattern thismod, patternFlight
			}
		}
	}
	else : if mPattern == patternDiveRocket {
		if mPatternSub == 0 {
			if mIsPChange {
				apacheSetAttack mApache, attackNone
				apacheSetAction mApache, actionDive
				mPatternCounter = rnd2(10, 20)
			}
			mPatternCounter--
			if mPatternCounter == 0 {
				aCtrChangePattern thismod, patternDiveRocket, 1
			}
		}
		else : if mPatternSub == 1 {
			if mIsPChange {
				apacheSetAttack mApache, attackRocket
				mTargetY = rnd2(200, 240)
			}
			if aY > mTargetY {
				aCtrChangePattern thismod, patternDiveRocket, 2
			}
		}
		else : if mPatternSub == 2 {
			if mIsPChange {
				apacheSetAction mApache, actionFastForward
			}
			if aX < 0 & aX > 640 {
				aCtrChangePattern thismod, patternFlight
			}
		}
	}
	else : if mPattern == patternFastForwardCannon {
		if mPatternSub == 0 {
			if mIsPChange {
				apacheSetAttack mApache, attackCTarget
				apacheSetCAngle mApache, toRadian(30)
				apacheSetAction mApache, actionFastForward
			}
			if aX < 0 & aX > 640 {
				aCtrChangePattern thismod, patternFlight
			}
		}
	}
	else : if mPattern == patternDownRocket {
		if mPatternSub == 0 {
			if mIsPChange {
				apacheSetAttack mApache, attackRocket
				apacheSetAction mApache, actionDown
				mTargetY = rnd2(300, 340)
			}
			if aY > mTargetY {
				aCtrChangePattern thismod, patternUp
			}
		}
	}
	else : if mPattern == patternLRCannon {
		if mPatternSub == 0 {
			if mIsPChange {
				apacheSetAttack mApache, attackCRake
				apacheSetAction mApache, actionForward
				mPatternCounter = rnd2(3, 6)
				mTargetX = rnd2(540, 600)
				mTargetX = aCtrTargetX(thismod, mTargetX)
			}
			if aCtrCheckX(thismod, aX, mTargetX) {
				aCtrChangePattern thismod, patternLRCannon, 1
			}
		}
		else : if mPatternSub == 1 {
			if mIsPChange {
				if aD == dirLeft : dir=dirRight : else : dir=dirLeft
				apacheSetAction mApache, actionDown
				apacheSetDirection mApache, dir
				mTargetY = rnd2(100, 160)
			}
			if aY > mTargetY {
				aCtrChangePattern thismod, patternLRCannon, 2
			}
		}
		else : if mPatternSub == 2 {
			if mIsPChange {
				apacheSetAction mApache, actionForward
				mTargetX = rnd2(540, 600)
				mTargetX = aCtrTargetX(thismod, mTargetX)
			}
			if aCtrCheckX(thismod, aX, mTargetX) {
				aCtrChangePattern thismod, patternLRCannon, 1

				mPatternCounter--
				if mPatternCounter == 0{
					aCtrChangePattern thismod, patternFlight
				}
			}
		}
	}
	else : if mPattern == patternLRFlight {
		if mPatternSub == 0 {
			if mIsPChange {
				apacheSetAttack mApache, attackNone
				apacheSetAction mApache, actionForward
				mPatternCounter = rnd2(1, 3)
				mTargetX = rnd2(540, 600)
				mTargetX = aCtrTargetX(thismod, mTargetX)
			}
			if aCtrCheckX(thismod, aX, mTargetX) {
				aCtrChangePattern thismod, patternLRFlight, 1
			}
		}
		else : if mPatternSub == 1 {
			if mIsPChange {
				if aD == dirLeft : dir=dirRight : else : dir=dirLeft
				apacheSetAction mApache, actionDown
				apacheSetDirection mApache, dir
				mTargetY = rnd2(100, 160)
			}
			if aY > mTargetY {
				aCtrChangePattern thismod, patternLRFlight, 2
			}
		}
		else : if mPatternSub == 2 {
			if mIsPChange {
				apacheSetAction mApache, actionForward
				mTargetX = rnd2(540, 600)
				mTargetX = aCtrTargetX(thismod, mTargetX)
			}
			if aCtrCheckX(thismod, aX, mTargetX) {
				aCtrChangePattern thismod, patternLRFlight, 1

				mPatternCounter--
				if mPatternCounter == 0{
					aCtrChangePattern thismod, patternFlight
				}
			}
		}
	}
	return



#modcfunc aCtrOdds array _odds
	rand = rnd(100)
	index = 0
	value = 0
	repeat length(_odds) / 2
		value += _odds(index*2 + 1)
		if rand < value : break
		index++
	loop

	return _odds(index*2)

#modcfunc aCtrCheckX int _X, int _targetX
	direction = apacheGetDirection(mApache)
	if direction == dirLeft {
		return _x < _targetX
	}
	else {
		return _x > _targetX
	}

	return 0

#modcfunc aCtrTargetX int _targetX
	direction = apacheGetDirection(mApache)
	if direction == dirLeft {
		return screenWidth - _targetX
	}
	else {
		return _targetX
	}

	return 0



#modfunc aCtrChangePattern int _pattern, int _patternSub
	mPattern = _pattern
	mPatternSub = _patternSub
	mIsOldPChange = true

logmes "changePattern :" + mPattern
logmes "sub           :" + mPatternSub

	return







#modfunc aCtrRespawn
	resType = rnd(3)
	if resType == 0 {
		y = rnd2(-130, -30)
		x = rnd2(0, 640)
		mTargetY = rnd2(100, 200)

		direction = dirRight
		if x > 320 : direction = dirLeft

		sLocals0 = actionDown,95, actionDive,5

		apacheRespawn mApache, x, y, direction
		apacheSetAction mApache, aCtrOdds(thismod, sLocals0)
		mPattern = patternEntry0
	}
	else : if resType == 1 {
		y = rnd2(100, 300)
		x = rnd2(-50, 0)
		mTargetX = rnd2(60, 600)
		sLocals0 = actionForward,90, actionFastForward,10

		apacheRespawn mApache, x, y, dirRight
		apacheSetAction mApache, aCtrOdds(thismod, sLocals0)
		mPattern = patternEntry1
	}
	else : if resType == 2 {
		y = rnd2(100, 300)
		x = rnd2(640, 690)
		mTargetX = rnd2(40, 580)
		sLocals0 = actionForward,90, actionFastForward,10

		apacheRespawn mApache, x, y, dirLeft
		apacheSetAction mApache, aCtrOdds(thismod, sLocals0)
		mPattern = patternEntry1
	}
/*
logmes "respawn   : " + resType
logmes "x         : " + x
logmes "y         : " + y
logmes "targetX   : " + mTargetX
logmes "targetY   : " + mTargetY
logmes "action    : " + apacheGetAction(mApache)
logmes "direction : " + apacheGetDirection(mApache)
*/
	return





#modfunc aCtrController
//	if isKeyTrigger(keyD0):aCtrChangePattern thismod, 3
//	if isKeyTrigger(keyD1):aCtrChangePattern thismod, 4
//	if isKeyTrigger(keyD2):aCtrChangePattern thismod, 5
//	if isKeyTrigger(keyD3):aCtrChangePattern thismod, 6
//	if isKeyTrigger(keyD4):aCtrChangePattern thismod, 7
//	if isKeyTrigger(keyD5):aCtrChangePattern thismod, 8
//	if isKeyTrigger(keyD6):aCtrChangePattern thismod, 9
//	if isKeyTrigger(keyD7):aCtrChangePattern thismod, 10
//	if isKeyTrigger(keyD8):aCtrChangePattern thismod, 11
//	if isKeyTrigger(keyD9):aCtrChangePattern thismod, 12
	return

#global


#endif
