#include "./source/Define.hsp"
#include "./source/Player.hsp"
#include "./source/Bullet.hsp"
#include "./source/Enemy.hsp"


#deffunc initializeScreen
	screen mainWindowID, screenWidth, screenHeight
	return


#deffunc loadGame

	celload "./data/myShip.bmp"
	gMyShipImageID = stat
	celdiv gMyShipImageID, 32,32, 16,16

	celload "./data/enemy.bmp"
	gEnemyImageID = stat
	celdiv gEnemyImageID, 32,32, 16,16

	celload "./data/bullet.bmp"
	gBulletImageID = stat
	celdiv gBulletImageID, 8,8, 4,$

	return

#deffunc initializeGame

	newmod gPlayer, ModPlayer, gMyShipImageID

// TODO : モジュール変数の多次元配列の作成方法を調べる
//	dimtype gEnemys, vartype("struct"), 4,10
	repeat enemyMaxNum
		newmod gEnemys, ModEnemy, gEnemyImageID
	loop

	//dimtype bullets, vartype("struct"),32
	repeat bulletMaxNum
		newmod gBullets, ModBullet, gBulletImageID
	loop

// TODO : 引数で渡した配列の保持の方法を調べる
//	playerSetBullets player, bullets

	return

#deffunc resetEnemys array enemys
	index = 0
	repeat enemyNumV
		i = cnt
		repeat enemyNumH
			j = cnt
			x = j * enemyOffsetX + enemyStartX
			y = i * enemyOffsetY + enemyStartY
			enemyReset gEnemys(index), x, y
			index++
		loop
	loop
	return

#deffunc checkHit array enemys, array bullets
	repeat length(enemys)
		i = cnt
		if enemyIsActive(enemys(i)) == false : continue

		enemyX = enemyGetX(enemys(i))
		enemyY = enemyGetY(enemys(i))

		repeat length(bullets)
			j = cnt
			if bulletIsActive(bullets(j)) == false : continue

			bulletX = bulletGetX(Bullets(j))
			bulletY = bulletGetY(bullets(j))
			diffX = abs(enemyX - bulletX)
			diffY = abs(enemyY - bulletY)

			isHitX = diffX < enemyBulletRangeX
			isHitY = diffY < enemyBulletRangeY
			if (isHitX & isHitY) {
			   enemyDisable enemys(i)
			   bulletDisable bullets(j)
			}
		loop
	loop

	return

#deffunc updateGame
	playerUpdate gPlayer, gBullets

	repeat length(gEnemys)
		enemyUpdate gEnemys(cnt)
	loop

	repeat length(gBullets)
		bulletUpdate gBullets(cnt)
	loop

	checkHit gEnemys, gBullets

	return

#deffunc drawGame
	playerDraw gPlayer

	repeat length(gEnemys)
		enemyDraw gEnemys(cnt)
	loop

	repeat length(gBullets)
		bulletDraw gBullets(cnt)
	loop

	return

#deffunc initializeInput
	dim inputCode, 32
	inputCode(leftKey) = 37
	inputCode(rightKey) = 39
	inputCode(upKey) = 38
	inputCode(downKey) = 40
	inputCode(spaceKey) = 32
	inputCode(escKey) = 27
	inputCode(wKey) = 87
	inputCode(aKey) = 65
	inputCode(sKey) = 83
	inputCode(dKey) = 68
	inputCode(leftMouse) = 1
	inputCode(rightMouse) = 2

	gOldKeyState = 0
	gNewKeyState = 0
	gTriggerKeyState = 0
	gReleaseKeyState = 0

	return

#deffunc updateInput
	gOldKeyState = gNewKeyState
	gNewKeyState = 0
	repeat length(inputCode)
		getkey inputKey, inputCode(cnt)
		if inputKey : gNewKeyState |= (1 << cnt)
	loop

	gTriggerKeyState = (gOldKeyState ^ $FFFFFFFF) & gNewKeyState
	gReleaseKeyState = (gNewKeyState ^ $FFFFFFFF) & gOldKeyState

	return

#defcfunc isKeyUp int key
	return isKeyDown(key) == false

#defcfunc isKeyDown int key
	return gNewKeyState & (1 << key)

#defcfunc isKeyTrigger int key
	return gTriggerKeyState & (1 << key)

#defcfunc isKeyRelease int key
	return gReleaseKeyState & (1 << key)



*main

	initializeScreen

	loadGame
	initializeGame

	initializeInput

	resetEnemys gEnemys

	repeat
		redraw 0
//		redraw 1
		color backgoundColor
		boxf 0, 0, screenWidth, screenHeight

		updateInput
		updateGame
		drawGame

		if isKeyDown(escKey) {
			goto *gameEnd
		}

		redraw 1
		await FPS
	loop

*gameEnd
	end
