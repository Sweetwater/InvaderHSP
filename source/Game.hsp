#ifndef ___Game___
#define ___Game___

#include "./source/Define.hsp"
#include "./source/Player.hsp"
#include "./source/Bullet.hsp"
#include "./source/Enemy.hsp"
#include "./source/Bunker.hsp"
#include "./source/Rocket.hsp"
#include "./source/RocketBullet.hsp"
#include "./source/Apache.hsp"


#module Game

#enum stateInitialize = 0
#enum statePlay

#deffunc loadGame
	celload "./data/nico.bmp"
	gMyShipImageID = stat
	celdiv gMyShipImageID, 32,32, 16,16

	celload "./data/apache.bmp"
	gApacheImageID = stat
	celdiv gApacheImageID, 32,75, 17,39

	celload "./data/bullet.bmp"
	gBulletImageID = stat
	celdiv gBulletImageID, 8,8, 4,4

	celload "./data/rocketBullet.bmp"
	gRBulletImageID = stat
	celdiv gRBulletImageID, 28,9, 17,4

	celload "./data/rpg7.bmp"
	gRocketImageID = stat
	celdiv gRocketImageID, 42,9, 10,4

	celload "./data/bunker.bmp"
	gBunkerImageID = stat
	celdiv gBunkerImageID, 50,50, 25,25

	celload "./data/cannonShell.bmp"
	gCShellImageID = stat
	celdiv gCShellImageID, 16,16, 8,8

	celload "./data/background.bmp"
	gBackgroundImageID = stat
	celdiv gBackgroundImageID, 320,240, 0,0

	gBackBufferID = gBackgroundImageID + 1
	buffer gBackBufferID, 64,64
	celdiv gBackBufferID, 64,64, 32,32

	return


#deffunc initializeGame
// TODO : モジュール変数の多次元配列の作成方法を調べる
//	dimtype gEnemys, vartype("struct"), 4,10

	repeat apacheMaxNum
		newmod gApaches, ModApache, gApacheImageID, gRBulletImageID, gCShellImageID, gBackBufferID
	loop

	//dimtype bullets, vartype("struct"),32

	repeat enemyBulletMaxNum
		newmod gEnemyBullets, ModBullet, gBulletImageID
	loop

	repeat bunkerMaxNum
		newmod gBunkers, ModBunker, gBunkerImageID
	loop
	
	repeat playerBulletMaxNum
		newmod gPlayerBullets, ModRocketBullet, gRBulletImageID, gBackBufferID
	loop
	repeat rocketMaxNum
		newmod gRockets, ModRocket, gRocketImageID, gPlayerBullets(cnt)
	loop

	newmod gPlayer, ModPlayer, gMyShipImageID

// TODO : 引数で渡した配列の保持の方法を調べる
//	playerSetBullets player, bullets

	state = stateInitialize

	return


#deffunc resetEnemys array _enemys
	repeat length(_enemys)
		enemyReset _enemys(cnt), enemyStartX, enemyStartY
	loop
	return

#deffunc resetBunkers array _bunkers
	repeat length(_bunkers)
		x = cnt * bunkerOffsetX + bunkerStartX
		y = bunkerStartY
		bunkerReset _bunkers(cnt), x, y
	loop
	return


#defcfunc checkHitBullets int _x, int _y, array _bullets, local _i
	hitIndex = -1
	repeat length(_bullets)
		_i = cnt
		if bulletIsActive(_bullets(_i)) == false : continue

		bulletX = bulletGetX(_bullets(_i))
		bulletY = bulletGetY(_bullets(_i))
		diffX = abs(_x - bulletX)
		diffY = abs(_y - bulletY)

		isHitX = diffX < enemyBulletRangeX
		isHitY = diffY < enemyBulletRangeY
		if (isHitX & isHitY) {
			hitIndex = _i
			break
		}
	loop
	return hitIndex


#deffunc checkHitBunker array _bunkers, array _bullets, local _i
	repeat length(_bunkers)
		_i = cnt
		if bunkerIsActive(_bunkers(_i)) == false : continue

		bunkerX = bunkerGetX(_bunkers(_i))
		bunkerY = bunkerGetY(_bunkers(_i))

		hitIndex = checkHitBullets(bunkerX, bunkerY, _bullets)
		if hitIndex != -1 {
		   bunkerDisable _bunkers(_i)
		   bulletDisable _bullets(hitIndex)
		}
	loop

	return


#deffunc checkHitEnemy array _enemys, array _bullets, local _i
	repeat length(_enemys)
		_i = cnt
		if enemyIsActive(_enemys(_i)) == false : continue

		enemyX = enemyGetX(_enemys(_i))
		enemyY = enemyGetY(_enemys(_i))

		hitIndex = checkHitBullets(enemyX, enemyY, _bullets)
		if hitIndex != -1 {
		   enemyDisable _enemys(_i)
		   bulletDisable _bullets(hitIndex)
		}
	loop

	return


#deffunc checkHitPlayer var _player, array _bullets
	playerX = playerGetX(_player)
	playerY = playerGetY(_player)

	hitIndex = checkHitBullets(playerX, playerY, _bullets)
	if hitIndex != -1 {
	   playerDisable _player
	   bulletDisable _bullets(hitIndex)
	}
	return


#deffunc updateInitState
//	resetEnemys gEnemys
	resetBunkers gBunkers
	rocketRespawnCounter = rocketRespawnCount
	apacheRespawnCounter = apacheRespawnCount
	state = statePlay
	return

#deffunc updateRocketRespawn
	if rocketRespawnCounter {
		rocketRespawnCounter--
	}
	else {
		repeat length(gRockets)
			if rocketIsDisable(gRockets(cnt)) {
				x = rnd(screenWidth)
				rocketRespawn gRockets(cnt), x
				rocketRespawnCounter = rocketRespawnCount
				break
			}
		loop
	}
	return

#deffunc updateApacheRespawn
	if apacheRespawnCounter {
		apacheRespawnCounter--
	}
	else {
		dim dirs,2
		dirs(0) = dirLeft
		dirs(1) = dirRight
		repeat length(gApaches)
			if apacheIsDisable(gApaches(cnt)) {
				x = rnd(screenWidth)
				apacheRespawn gApaches(cnt), 320, 60, dirs(cnt)
				apacheRespawnCounter = apacheRespawnCount
				break
			}
		loop
	}
	return


#deffunc updatePlayState
	updateRocketRespawn
	updateApacheRespawn

	playerUpdate gPlayer

	repeat length(gRockets)
		rocketUpdate gRockets(cnt)
	loop

	repeat length(gApaches)
		apacheUpdate gApaches(cnt)
	loop

	repeat length(gPlayerBullets)
		rBulletUpdate gPlayerBullets(cnt)
	loop

	repeat length(gBunkers)
		bunkerUpdate gBunkers(cnt)
	loop


//	checkHitPlayer gPlayer, gEnemyBullets
//	checkHitEnemy gEnemys, gPlayerBullets
//	checkHitBunker gBunkers, gEnemyBullets
//	checkHitBunker gBunkers, gPlayerBullets
	return


#deffunc updateGame

	if state == stateInitialize {
		updateInitState
		return
	}
	if state == statePlay {
		updatePlayState
		return
	}

	return


#deffunc drawGame

	gsel 0
	gmode 1
	pos 0,0
//	celput gBackgroundImageID, 0, 2, 2

	gmode 4,,,255

	repeat length(gRockets)
		rocketDraw gRockets(cnt)
	loop

	playerDraw gPlayer

	repeat length(gApaches)
		apacheDraw gApaches(cnt)
	loop

	repeat length(gPlayerBullets)
		rBulletDraw gPlayerBullets(cnt)
	loop

	repeat length(gBunkers)
		bunkerDraw gBunkers(cnt)
	loop

	return



#deffunc getPickupRocket var _player, int _x, int _y
	repeat length(gRockets)
		if rocketIsReady(gRockets(cnt)) == false: continue

		x = rocketGetX(gRockets(cnt))
		y = rocketGetX(gRockets(cnt))
		diffX = x - _x
		diffY = y - _y
		if abs(diffX) < pickupRageX & abs(diffX) < pickupRageY {
			// モジュール変数型を返せないので
			// こちらからプレイヤーのメソッドを呼び出す
			rocket = gRockets(cnt)
			playerSetRocket _player, rocket
			break
		}
	loop
	return



#deffunc checkHitCShellPlaer array _cShells

	if playerIsDisable(gPlayer) : return

	pX = playerGetX(gPlayer)
	pY = playerGetY(gPlayer)

	hitIndex = checkHitCShells(_cShells, pX,pY, playerRangeX,playerRangeY)
	if hitIndex != -1 {
	   playerDisable gPlayer
	   cShellDisable _cShells(hitIndex)
	}
	return


#deffunc checkHitCShellBunker array _cShells
	repeat length(gBunkers)
		i = cnt
		if bunkerIsDisable(gBunkers(i)) : continue

		bX = bunkerGetX(gBunkers(i))
		bY = bunkerGetY(gBunkers(i))

		hitIndex = checkHitCShells(_cShells, bX,bY, bunkerRangeX,bunkerRangeY)
		if hitIndex != -1 {
		   bunkerDamage gBunkers(i), cShellDamage
		   cShellDisable _cShells(hitIndex)
		}
	loop
	return


#defcfunc checkHitCShells	array _cShells,				\
							int _x, int _y,				\
							int _rangeX, int _rangeY,	\
							local _i

	hitIndex = -1
	rangeX = sShellRangeX + _rangeX
	rangeY = sShellRangeY + _rangeY
	repeat length(_cShells)
		_i = cnt
		if cShellIsDisable(_cShells(_i)) : continue

		cX = cShellGetX(_cShells(_i))
		cY = cShellGetY(_cShells(_i))

		if isHit(_x,_y, cX,cY, rangeX,rangeY) {
			hitIndex = _i
			break
		}
	loop
	return hitIndex


#defcfunc isHit double _x1, double _y1,	\
				double _x2, double _y2,	\
				double _rangeX, double _rangeY

	diffX = absf(_x1 - _x2)
	diffY = absf(_y1 - _y2)

	isHitX = diffX < _rangeX
	isHitY = diffY < _rangeY

	return isHitX & isHitY


#global

#endif
