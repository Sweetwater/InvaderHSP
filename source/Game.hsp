#ifndef ___Game___
#define ___Game___

#include "./source/Define.hsp"
#include "./source/Player.hsp"
#include "./source/Bullet.hsp"
#include "./source/Enemy.hsp"
#include "./source/Bunker.hsp"

#module Game

#enum stateInitialize = 0
#enum statePlay

#deffunc loadGame
	celload "./data/nico.bmp"
	gMyShipImageID = stat
	celdiv gMyShipImageID, 32,32, 16,16

	celload "./data/enemy.bmp"
	gEnemyImageID = stat
	celdiv gEnemyImageID, 32,32, 16,16

	celload "./data/bullet.bmp"
	gBulletImageID = stat
	celdiv gBulletImageID, 8,8, 4,4

	celload "./data/bunker.bmp"
	gBunkerImageID = stat
	celdiv gBunkerImageID, 32,32, 4,4

	celload "./data/background.bmp"
	gBackgroundImageID = stat
	celdiv gBackgroundImageID, 320,240, 0,0

	return


#deffunc initializeGame
	newmod gPlayer, ModPlayer, gMyShipImageID

// TODO : モジュール変数の多次元配列の作成方法を調べる
//	dimtype gEnemys, vartype("struct"), 4,10
	repeat enemyMaxNum
		newmod gEnemys, ModEnemy, gEnemyImageID
	loop

	//dimtype bullets, vartype("struct"),32

	repeat playerBulletMaxNum
		newmod gPlayerBullets, ModBullet, gBulletImageID
	loop
	repeat enemyBulletMaxNum
		newmod gEnemyBullets, ModBullet, gBulletImageID
	loop

	repeat bunkerMaxNum
		newmod gBunkers, ModBunker, gBunkerImageID
	loop

// TODO : 引数で渡した配列の保持の方法を調べる
//	playerSetBullets player, bullets

	state = stateInitialize

	return


#deffunc resetEnemys array _enemys
	repeat length(_enemys)
		enemyReset _enemys(cnt), enemyStartX, enemyStartY
	loop
	return

#deffunc resetBunkers array _bunkers
	repeat length(_bunkers)
		x = cnt * bunkerOffsetX + bunkerStartX
		y = bunkerStartY
		bunkerReset _bunkers(cnt), x, y
	loop
	return


#defcfunc checkHitBullets int _x, int _y, array _bullets, local _i
	hitIndex = -1
	repeat length(_bullets)
		_i = cnt
		if bulletIsActive(_bullets(_i)) == false : continue

		bulletX = bulletGetX(_bullets(_i))
		bulletY = bulletGetY(_bullets(_i))
		diffX = abs(_x - bulletX)
		diffY = abs(_y - bulletY)

		isHitX = diffX < enemyBulletRangeX
		isHitY = diffY < enemyBulletRangeY
		if (isHitX & isHitY) {
			hitIndex = _i
			break
		}
	loop
	return hitIndex


#deffunc checkHitBunker array _bunkers, array _bullets, local _i
	repeat length(_bunkers)
		_i = cnt
		if bunkerIsActive(_bunkers(_i)) == false : continue

		bunkerX = bunkerGetX(_bunkers(_i))
		bunkerY = bunkerGetY(_bunkers(_i))

		hitIndex = checkHitBullets(bunkerX, bunkerY, _bullets)
		if hitIndex != -1 {
		   bunkerDisable _bunkers(_i)
		   bulletDisable _bullets(hitIndex)
		}
	loop

	return


#deffunc checkHitEnemy array _enemys, array _bullets, local _i
	repeat length(_enemys)
		_i = cnt
		if enemyIsActive(_enemys(_i)) == false : continue

		enemyX = enemyGetX(_enemys(_i))
		enemyY = enemyGetY(_enemys(_i))

		hitIndex = checkHitBullets(enemyX, enemyY, _bullets)
		if hitIndex != -1 {
		   enemyDisable _enemys(_i)
		   bulletDisable _bullets(hitIndex)
		}
	loop

	return


#deffunc checkHitPlayer var _player, array _bullets
	playerX = playerGetX(_player)
	playerY = playerGetY(_player)

	hitIndex = checkHitBullets(playerX, playerY, _bullets)
	if hitIndex != -1 {
	   playerDisable _player
	   bulletDisable _bullets(hitIndex)
	}
	return


#deffunc updateInitState
	resetEnemys gEnemys
	resetBunkers gBunkers
	state = statePlay
	return


#deffunc updatePlayState
	playerUpdate gPlayer, gPlayerBullets

	repeat length(gEnemys)
		enemyUpdate gEnemys(cnt), gEnemyBullets
	loop

	repeat length(gPlayerBullets)
		bulletUpdate gPlayerBullets(cnt)
	loop
	repeat length(gEnemyBullets)
		bulletUpdate gEnemyBullets(cnt)
	loop

	repeat length(gBunkers)
		bunkerUpdate gBunkers(cnt)
	loop

	checkHitPlayer gPlayer, gEnemyBullets
	checkHitEnemy gEnemys, gPlayerBullets
	checkHitBunker gBunkers, gEnemyBullets
	checkHitBunker gBunkers, gPlayerBullets
	return


#deffunc updateGame
	if state == stateInitialize {
		updateInitState
		return
	}
	if state == statePlay {
		updatePlayState
		return
	}

	return


#deffunc drawGame

	gmode 1
	pos 0,0
	celput gBackgroundImageID, 0, 2, 2

	gmode 4,,,255

	playerDraw gPlayer

	repeat length(gEnemys)
		enemyDraw gEnemys(cnt)
	loop

	repeat length(gPlayerBullets)
		bulletDraw gPlayerBullets(cnt)
	loop
	repeat length(gEnemyBullets)
		bulletDraw gEnemyBullets(cnt)
	loop

	repeat length(gBunkers)
		bunkerDraw gBunkers(cnt)
	loop

	return


#global

#endif
