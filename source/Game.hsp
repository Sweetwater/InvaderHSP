#ifndef ___Game___
#define ___Game___

#include "./source/Define.hsp"
#include "./source/Player.hsp"
#include "./source/Bullet.hsp"
#include "./source/Enemy.hsp"

#module Game

#enum stateInitialize = 0
#enum statePlay

#deffunc loadGame
	celload "./data/myShip.bmp"
	gMyShipImageID = stat
	celdiv gMyShipImageID, 32,32, 16,16

	celload "./data/enemy.bmp"
	gEnemyImageID = stat
	celdiv gEnemyImageID, 32,32, 16,16

	celload "./data/bullet.bmp"
	gBulletImageID = stat
	celdiv gBulletImageID, 8,8, 4,$
	return


#deffunc initializeGame
	newmod gPlayer, ModPlayer, gMyShipImageID

// TODO : モジュール変数の多次元配列の作成方法を調べる
//	dimtype gEnemys, vartype("struct"), 4,10
	repeat enemyMaxNum
		newmod gEnemys, ModEnemy, gEnemyImageID
	loop

	//dimtype bullets, vartype("struct"),32

	repeat playerBulletMaxNum
		newmod gPlayerBullets, ModBullet, gBulletImageID
	loop
	repeat enemyBulletMaxNum
		newmod gEnemyBullets, ModBullet, gBulletImageID
	loop

// TODO : 引数で渡した配列の保持の方法を調べる
//	playerSetBullets player, bullets

	state = stateInitialize

	return


#deffunc resetEnemys array enemys
	repeat enemyMaxNum
		enemyReset gEnemys(cnt), enemyStartX, enemyStartY
	loop
	return


#defcfunc checkHitBullets int x, int y, array bullets, local j
	hitIndex = -1
	repeat length(bullets)
		j = cnt
		if bulletIsActive(bullets(j)) == false : continue

		bulletX = bulletGetX(bullets(j))
		bulletY = bulletGetY(bullets(j))
		diffX = abs(x - bulletX)
		diffY = abs(y - bulletY)

		isHitX = diffX < enemyBulletRangeX
		isHitY = diffY < enemyBulletRangeY
		if (isHitX & isHitY) {
			hitIndex = j
			break
		}
	loop
	return hitIndex


#deffunc checkHitEnemy array enemys, array bullets
	repeat length(enemys)
		i = cnt
		if enemyIsActive(enemys(i)) == false : continue

		enemyX = enemyGetX(enemys(i))
		enemyY = enemyGetY(enemys(i))

		hitIndex = checkHitBullets(enemyX, enemyY, bullets)
		if hitIndex != -1 {
		   enemyDisable enemys(i)
		   bulletDisable bullets(hitIndex)
		}
	loop

	return


#deffunc checkHitPlayer var player, array bullets
	playerX = playerGetX(player)
	playerY = playerGetY(player)

	hitIndex = checkHitBullets(playerX, playerY, bullets)
	if hitIndex != -1 {
	   playerDisable player
	   bulletDisable bullets(hitIndex)
	}
	return


#deffunc updateInitState
	resetEnemys gEnemys
	state = statePlay
	return


#deffunc updatePlayState
	playerUpdate gPlayer, gPlayerBullets

	repeat length(gEnemys)
		enemyUpdate gEnemys(cnt), gEnemyBullets
	loop

	repeat length(gPlayerBullets)
		bulletUpdate gPlayerBullets(cnt)
	loop
	repeat length(gEnemyBullets)
		bulletUpdate gEnemyBullets(cnt)
	loop

	checkHitPlayer gPlayer, gEnemyBullets
	checkHitEnemy gEnemys, gPlayerBullets
	return


#deffunc updateGame
	if state == stateInitialize {
		updateInitState
		return
	}
	if state == statePlay {
		updatePlayState
		return
	}

	return


#deffunc drawGame
	gmode 2

	playerDraw gPlayer

	repeat length(gEnemys)
		enemyDraw gEnemys(cnt)
	loop

	repeat length(gPlayerBullets)
		bulletDraw gPlayerBullets(cnt)
	loop
	repeat length(gEnemyBullets)
		bulletDraw gEnemyBullets(cnt)
	loop

	return


#global

#endif
